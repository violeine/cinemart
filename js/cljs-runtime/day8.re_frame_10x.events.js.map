{"version":3,"sources":["day8/re_frame_10x/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.events/fixed-after","f","G__22542","G__22543","G__22544","G__22545","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/->interceptor","context","db","cljs.core/contains?","cljs.core.get_in","event","day8.re-frame-10x.events/log-trace?","trace","render-operation?","cljs.core._EQ_","component-name","clojure.string/includes?","day8.re-frame-10x.events/disable-tracing!","re-frame.trace/remove-trace-cb","day8.re-frame-10x.events/enable-tracing!","p1__22554#","re-frame.trace/register-trace-cb","G__22556","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/dispatch","p__22557","vec__22561","seq__22562","cljs.core/seq","first__22563","cljs.core/first","cljs.core/next","day8.re-frame-10x.events/dissoc-in","m","k","ks","keys","temp__5733__auto__","nextmap","cljs.core.get","newmap","cljs.core.assoc","cljs.core.dissoc","day8.re-frame-10x.events/read-string-maybe","s","e22565","cljs.tools.reader.edn.read_string","day8.re-frame-10x.utils.utils/default-readers","e","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.core.reg_event_db","p__22569","vec__22570","cljs.core.nth","_","width%","day8.re-frame-10x.utils.localstorage/save!","x__4214__auto__","y__4215__auto__","cljs.core/assoc-in","p__22573","vec__22576","width","p__22579","vec__22580","selected-tab","cljs.core.update_in","cljs.core/not","p__22586","vec__22587","show-panel?","day8.re-frame-10x.utils.localstorage/delete-all-keys!","js/location.reload","now-showing?","external-panel?","using-trace?","or__4126__auto__","p__22614","vec__22615","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.events/ignored-event-mw","G__22625","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/path","p1__22621#","ignored-events","id","cljs.core/random-uuid","js/Date.now","p__22626","vec__22627","p__22630","vec__22631","event-str","old-event","p__22634","vec__22635","day8.re-frame-10x.events/filtered-view-trace-mw","G__22639","p1__22638#","filtered-view-trace","p__22640","vec__22641","p__22644","vec__22645","ns-str","p__22648","vec__22649","day8.re-frame-10x.events/low-level-trace-mw","G__22653","p1__22652#","p__22654","vec__22655","low-level","p__22658","vec__22659","trace-type","capture?","p__22662","vec__22663","debug?","G__22667","p1__22666#","p__22668","vec__22669","follows-events?","day8.re-frame-10x.events/mount","popup-window","popup-document","app","resize-update-scheduled?","cljs.core.atom","handle-window-resize","cljs.core/deref","G__22672","reagent.impl.batching/next-tick","height","G__22673","cljs.core/reset!","handle-window-position","pos","map__22674","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","left","top","screen-left","screen-top","cljs.core.not_EQ_","G__22676","window-position-interval","unmount","G__22677","js/clearInterval","day8.re-frame-10x.styles/inject-trace-styles","goog.object/set","G__22678","day8.re_frame_10x.inlined_deps.reagent.v0v10v0.reagent.dom.render","day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core/create-class","js/setInterval","day8.re-frame-10x.view.container/devtools-inner","p__22679","map__22680","day8.re-frame-10x.events/open-debugger-window","dimensions","doc-title","js/document.title","new-window-title","goog.string/escapeString","new-window-html","w","js/window.open","d","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.core.reg_event_fx","ctx","G__22683","G__22684","p1__22682#","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/after","p__22685","vec__22686","dim","new-dim","G__22690","G__22691","p1__22689#","p__22692","vec__22693","map__22696","G__22699","G__22700","p1__22698#","p__22701","vec__22702","map__22705","js/window.addEventListener","G__22707","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/dispatch-sync","p__22708","vec__22709","unloading?","day8.re-frame-10x.events/save-filter-items","filter-items","p__22712","vec__22713","G__22719","p__22720","vec__22721","filter-input","filter-type","new-db","p1__22716#","cljs.core/some","p1__22717#","p1__22718#","cljs.core.remove","cljs.core.conj","clojure.string/lower-case","js/parseFloat","G__22725","p__22726","vec__22727","filter-id","p1__22724#","G__22730","trace-detail-expansions","cljs.core.update","G__22732","p__22733","vec__22734","expansions","showing?","p1__22731#","G__22737","p__22738","vec__22739","categories","new-categories","clojure.set/superset?","clojure.set.difference","clojure.set.union","G__22742","p__22743","vec__22744","G__22748","p1__22747#","p__22749","vec__22750","show-epoch-traces?","day8.re-frame-10x.events/app-db-path-mw","G__22754","p1__22753#","paths","p__22755","vec__22756","path-id","path-str","path","cljs.core/sequential?","clojure.string/blank?","p__22759","vec__22760","map__22763","valid-path?","cljs.core.pr_str","p__22765","vec__22766","open?","p__22769","vec__22770","diff?","p__22773","vec__22774","p__22777","vec__22778","p__22783","vec__22784","search-string","G__22787","p__22788","vec__22789","G__22792","p__22793","vec__22794","new-paths","cljs.core.disj","G__22797","re-frame.interop/reagent-id","re-frame.db/app-db","p__22798","vec__22799","new-id","epochs","match-id","day8.re-frame-10x.utils.utils/last-in-vec","match","day8.re-frame-10x.metamorphic/matched-event","temp__5739__auto__","day8.re-frame-10x.metamorphic/app-db-after","day8.re-frame-10x.events/first-match-id","p__22803","p__22804","map__22805","vec__22806","new-traces","filtered-traces","cljs.core.filter","cljs.core.sort_by","map__22810","number-of-epochs-to-retain","events-to-ignore","cljs.core/vals","cljs.core.map","cljs.core/set","previous-traces","parse-state","day8.re-frame-10x.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.reduce","cljs.core/conj","day8.re-frame-10x.metamorphic/parse-traces","new-matches","previous-matches","subscription-info","day8.re-frame-10x.metamorphic/subscription-info","sub-state","day8.re-frame-10x.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame-10x.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv","epoch-traces","cljs.core.into","cljs.core.comp","day8.re-frame-10x.utils.utils/id-between-xf","start-of-epoch","event-handler-trace","day8.re-frame-10x.metamorphic/event-handler?","dofx-trace","day8.re-frame-10x.metamorphic/event-dofx?","event-trace","day8.re-frame-10x.metamorphic/event-run?","finish-run","day8.re-frame-10x.metamorphic/finish-run?","day8.re-frame-10x.metamorphic/elapsed-time","sub-match","t","quiescent?","day8.re-frame-10x.metamorphic/quiescent?","all-matches","retained-matches","cljs.core/take-last","first-id-to-retain","retained-traces","p1__22802#","cljs.core.drop_while","day8.re-frame-10x.metamorphic/low-level-reagent-trace?","day8.re-frame-10x.metamorphic/low-level-re-frame-trace?","current-index","current-id","cljs.core.juxt","cljs.core/identity","G__22831","p__22834","map__22835","temp__5737__auto__","match-ids","match-array-index","day8.re-frame-10x.utils.utils/find-index-in-vec","x","cljs.core/count","G__22849","p__22851","map__22853","G__22857","p__22858","map__22859","G__22861","p__22862","p__22863","map__22864","vec__22865","G__22869","current-epoch-id","app-db-before","day8.re-frame-10x.metamorphic/app-db-before","G__22870","event-to-replay","re-frame.core/dispatch","re-frame.trace/reset-tracing!","G__22871","p__22872","vec__22873","ignore?","G__22876","p__22877","vec__22878","G__22881","p__22882","vec__22883","G__22886","p__22887","vec__22888","pinned","pinned?","G__22891","p__22892","vec__22893","filter-value","G__22896","p__22897","vec__22898","code-open?","open?-path","G__22901","p__22902","vec__22903","execution-order?","G__22906","p__22907","vec__22908","form","new-form","G__22911","p__22912","vec__22913","G__22916","p__22917","vec__22918","_show-all-code?","new-show-all-code?","G__22921","p__22922","vec__22923","current-state","new-state","G__22926","p__22927","vec__22928","component","new-direction","G__22931","errors"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core :as rf]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core :as r]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.dom :as rdom]\n            [cljs.tools.reader.edn]\n            [day8.re-frame-10x.utils.utils :as utils :refer [spy]]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]\n            [reagent.impl.batching :as batching]\n            [clojure.string :as str]\n            [goog.object]\n            [goog.string]\n            [re-frame.db]\n            [re-frame.interop]\n            [re-frame.core]\n            [re-frame.trace]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame-10x.metamorphic :as metam]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)                                 ;; call f for side effects\n               context))))                                  ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-name    (get-in trace [:tags :component-name] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-name \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string {:readers utils/default-readers} s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/window-width\n  (fn [db [_ width]]\n    (assoc-in db [:settings :window-width] width)))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n(rf/reg-event-db\n  :settings/app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) (fixed-after #(localstorage/save! \"app-db-follows-events?\" %))]\n  (fn [db [_ follows-events?]]\n    follows-events?))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  ;; When programming here, we need to be careful about which document and window\n  ;; we are operating on, and keep in mind that the window can close without going\n  ;; through standard react lifecycle, so we hook the beforeunload event.\n  (let [app                      (.getElementById popup-document \"--re-frame-10x--\")\n        resize-update-scheduled? (atom false)\n        handle-window-resize     (fn [e]\n                                   (when-not @resize-update-scheduled?\n                                     (batching/next-tick\n                                       (fn []\n                                         (let [width  (.-innerWidth popup-window)\n                                               height (.-innerHeight popup-window)]\n                                           (rf/dispatch [:settings/external-window-resize {:width width :height height}]))\n                                         (reset! resize-update-scheduled? false)))\n                                     (reset! resize-update-scheduled? true)))\n        handle-window-position   (let [pos (atom {})]\n                                   (fn []\n                                     ;; Only update re-frame if the windows position has changed.\n                                     (let [{:keys [left top]} @pos\n                                           screen-left (.-screenX popup-window)\n                                           screen-top  (.-screenY popup-window)]\n                                       (when (or (not= left screen-left)\n                                                 (not= top screen-top))\n                                         (rf/dispatch [:settings/external-window-position {:left screen-left :top screen-top}])\n                                         (reset! pos {:left screen-left :top screen-top})))))\n        window-position-interval (atom nil)\n        unmount                  (fn [_]\n                                   (.removeEventListener popup-window \"resize\" handle-window-resize)\n                                   (some-> @window-position-interval js/clearInterval)\n                                   nil)]\n\n\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (rdom/render\n      [(r/create-class\n         {:display-name           \"devtools outer external\"\n          :component-did-mount    (fn []\n                                    (.addEventListener popup-window \"resize\" handle-window-resize)\n                                    (.addEventListener popup-window \"beforeunload\" unmount)\n                                    ;; Check the window position every 10 seconds\n                                    (reset! window-position-interval\n                                            (js/setInterval\n                                              handle-window-position\n                                              2000)))\n          :component-will-unmount unmount\n          :reagent-render         (fn [] [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Originally copied from re-frisk.devtool/open-debugger-window\"\n  [{:keys [width height top left] :as dimensions}]\n  (let [doc-title        js/document.title\n        new-window-title (goog.string/escapeString (str \"re-frame-10x | \" doc-title))\n        new-window-html  (str \"<head><title>\"\n                              new-window-title\n                              \"</title></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-10x--\\\" class=\\\"external-window\\\"></div></body>\")]\n    ;; We would like to set the windows left and top positions to match the monitor that it was on previously, but Chrome doesn't give us\n    ;; control over this, it will only position it within the same display that it was popped out on.\n    (if-let [w (js/window.open \"about:blank\" \"re-frame-10x-popout\"\n                               (str \"width=\" width \",height=\" height \",left=\" left \",top=\" top\n                                    \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))]\n      (let [d (.-document w)]\n        ;; We had to comment out the following unmountComponentAtNode as it causes a React exception we assume\n        ;; because React says el is not a root container that it knows about.\n        ;; In theory by not freeing up the resources associated with this container (e.g. event handlers) we may be\n        ;; creating memory leaks. However with observation of the heap in developer tools we cannot see any significant\n        ;; unbounded growth in memory usage.\n        ;(when-let [el (.getElementById d \"--re-frame-10x--\")]\n        ;  (r/unmount-component-at-node el)))\n        (.open d)\n        (.write d new-window-html)\n        (goog.object/set w \"onload\" #(mount w d))\n        (.close d)\n        true)\n      false)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (if (open-debugger-window (get-in ctx [:db :settings :external-window-dimensions]))\n      (do\n        (localstorage/save! \"external-window?\" true)\n        {:db             (-> (:db ctx)\n                             (assoc-in [:settings :external-window?] true)\n                             (dissoc-in [:errors :popup-failed?]))\n         :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]})\n      {:db       (assoc-in (:db ctx) [:errors :popup-failed?] true)\n       :dispatch [:global/external-closed]})))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-db\n  :settings/external-window-dimensions\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ new-dim]]\n    new-dim))\n\n(rf/reg-event-db\n  :settings/external-window-resize\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {width :width height :height}]]\n    (assoc dim :width width :height height)))\n\n(rf/reg-event-db\n  :settings/external-window-position\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {left :left top :top}]]\n    (assoc dim :left left :top top)))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/reset-current-epoch-app-db\n  (fn [db [_ new-id]]\n    (when (get-in db [:settings :app-db-follows-events?])\n      (let [epochs   (:epochs db)\n            match-id (or new-id\n                         ;; new-id may be nil when we call this event from :settings/play\n                         (utils/last-in-vec (get epochs :match-ids)))\n            match    (get-in epochs [:matches-by-id match-id])\n            event    (metam/matched-event (:match-info match))]\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (metam/app-db-after event)]\n          (reset! re-frame.db/app-db new-db))))\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-fx\n  :epochs/receive-new-traces\n  (fn [{:keys [db]} [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            ;; If there are new matches found, then by definition, a quiescent trace must have been received\n            ;; However in cases where we reset the db in a replay, we won't get an event match.\n            ;; We short circuit here to avoid iterating over the traces when it's unnecessary.\n            quiescent?                 (or (seq new-matches)\n                                           (filter metam/quiescent? filtered-traces))\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        {:db       (-> db\n                       (assoc-in [:traces :all-traces] retained-traces)\n                       (update :epochs (fn [epochs]\n                                         (let [current-index (:current-epoch-index epochs)\n                                               current-id    (:current-epoch-id epochs)]\n                                           (assoc epochs\n                                             :matches retained-matches\n                                             :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                             :match-ids (mapv first-match-id retained-matches)\n                                             :parse-state parse-state\n                                             :sub-state new-sub-state\n                                             :subscription-info subscription-info\n                                             ;; Reset current epoch to the head of the list if we got a new event in.\n                                             :current-epoch-id (if (seq new-matches) nil current-id)\n                                             :current-epoch-index (if (seq new-matches) nil current-index))))))\n         :dispatch (when quiescent? [:epochs/quiescent])})\n      ;; Else\n      {:db db})))\n\n;; TODO: this code is a bit messy, needs refactoring and cleaning up.\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (utils/last-in-vec (:match-ids db))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/most-recent-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    {:db       (assoc db :current-epoch-index nil\n                         :current-epoch-id nil)\n     :dispatch [:snapshot/reset-current-epoch-app-db (utils/last-in-vec (:match-ids db))]}))\n\n(rf/reg-event-fx\n  :epochs/load-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} [_ new-id]]\n    {:db       (assoc db :current-epoch-id new-id)\n     :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))\n\n(rf/reg-event-db\n  :epochs/replay\n  [(rf/path [:epochs])]\n  (fn [epochs _]\n    (let [current-epoch-id (or (get epochs :current-epoch-id)\n                               (utils/last-in-vec (get epochs :match-ids)))\n          event-trace      (-> (get-in epochs [:matches-by-id current-epoch-id :match-info])\n                               (metam/matched-event))\n          app-db-before    (metam/app-db-before event-trace)\n          event            (get-in event-trace [:tags :event])]\n      (reset! re-frame.db/app-db app-db-before)\n      ;; Wait for quiescence\n      (assoc epochs :replay event))))\n\n(rf/reg-event-db\n  :epochs/quiescent\n  [(rf/path [:epochs])]\n  (fn [db _]\n    (if-some [event-to-replay (:replay db)]\n      (do (re-frame.core/dispatch event-to-replay)\n          (dissoc db :replay))\n      db)))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/set-diff-visibility\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in expansions [id :open?]))]\n      (-> expansions\n          (assoc-in [id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [id :open?] open?)))))\n\n(rf/reg-event-db\n  :subs/set-pinned\n  [(rf/path [:subs :pinned])]\n  (fn [pinned [_ id pinned?]]\n    (assoc-in pinned [id :pin?] pinned?)))\n\n(rf/reg-event-db\n  :subs/set-filter\n  [(rf/path [:subs :filter-str])]\n  (fn [_ [_ filter-value]]\n    filter-value))\n\n;;\n\n(rf/reg-event-db\n  :code/set-code-visibility\n  [(rf/path [:code :code-open?])]\n  (fn [code-open? [_ open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n :code/set-execution-order\n [(rf/path [:code :execution-order?])]\n (fn [_ [_ execution-order?]]\n   execution-order?))\n\n(rf/reg-event-db\n  :code/hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    new-form))\n\n(rf/reg-event-db\n  :code/exit-hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  :code/set-show-all-code?\n  [(rf/path [:code :show-all-code?])]\n  (fn [_show-all-code? [_ new-show-all-code?]]\n    new-show-all-code?))\n\n(rf/reg-event-db\n  :code/repl-msg-state\n  [(rf/path [:code :repl-msg-state])]\n  (fn [current-state [_ new-state]]\n    (if (and (= current-state :running) (= new-state :start)) ;; Toggles between :running and :re-running to guarantee rerenderig when you continuously call this event\n      :re-running\n      (if (= new-state :start) :running :end))))\n\n;;\n\n(rf/reg-event-db\n  :component/set-direction\n  [(rf/path [:component])]\n  (fn [component [_ new-direction]]\n    (assoc component :direction new-direction)))\n\n;;\n\n(rf/reg-event-db\n  :errors/dismiss-popup-failed\n  [(rf/path [:errors])]\n  (fn [errors _]\n    (dissoc errors :popup-failed?)))\n\n;;\n\n(rf/reg-event-db\n  :history/toggle-history\n  (fn [db _]\n    (update-in db [:history :showing-history?] not)))\n"]}