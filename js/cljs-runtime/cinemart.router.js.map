{"version":3,"sources":["cinemart/router.cljs"],"mappings":";AAcA,AAAA;;;AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFE;AAFJ,AAGG,AAAA,AAAA,AAACC,AAAKD;;;AAHT,AAAA,AAAA,AAAMF,AAIFE,AAAEE;AAJN,AAKG,AAAA,AAACD,AAAKD,AAAEE;;;AALX,AAAA,AAAA,AAAMJ,AAMFE,AAAEE,AAAOC;AANb,AAOG,AAACC,AAASJ,AAAEE,AAAOC;;;AAPtB,AAAA,AAAA,AAAML;;AAAN,AASA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKO,AAKMC,AAKG;AAAOJ;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAVrB,AAYc;AAAOA;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAZrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAgBWM,AAGG,AAAKN;AAAL,AAAa,AAACK,AAAeL;AAnB3C,AAoBc,AAAKA;AAAL,AAAa,AAAA,AAACK;AApB5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAwBWE,AAGgB,AAAKP;AAAL,AAAa,AAAA,AAAA,AAACQ,AAEC,AAAA,AAAA,AAAA,AAAIR;AA7B9C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiCWS,AAIM,AAAKC;AAAL,AACE,AAACL,AAAeK;;AAChB,AAAA,AAAA,AAAA,AAACC,AAAOD;AAvC3B,AAwCc,AAAKE;AAAL,AAAY,AAACP,AAAeO;AAxC1C,AAyCc;AAAOZ;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAzCrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA6CWa,AAMAP,AAIG;AAAON;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAvDrB,AAwDc;AAAOA;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;AAErB,AAAA,AAAMc,AAAaC;AAAnB,AACE,AAAMA;AAAN,AACE,AAAA,AAAA,AAACP,AAA6BO;;AADhC;;;AAGF,AAAKC,AAAO,AAAA,AAAA,AAAA,AAAA,AAACC,AAAUd,AAAyBe;AAEhD,AAAA,AAAMC;AAAN,AAEE,AAAA,AAACC;;AACD,AAAA,AAAA,AAAA,AAACC,AAAWL,AAAOF","names":["var_args","G__29226","cinemart.router/href","js/Error","k","cinemart.router.href","params","query","reitit.frontend.easy.href","cinemart.router/routes","cinemart.home.view/home-page","js/console.log","cinemart.about.view/about-page","cinemart.movie.view/movie","re-frame.core/dispatch","cinemart.login.view/login","match","cljs.core.get_in","auth?","cinemart.signup.view/signup","cinemart.router/on-navigate","new-match","cinemart.router/router","reitit.frontend.router","reitit.coercion.spec/coercion","cinemart.router/init-routes!","cljs.core.println","reitit.frontend.easy/start!"],"sourcesContent":["(ns cinemart.router\n  (:require\n   [reitit.coercion.spec :as rss]\n   [reitit.frontend :as rf]\n   [reitit.frontend.easy :as rfe]\n   [cinemart.events :as events]\n   [cinemart.movie.events :as movie-events]\n   [cinemart.home.view :refer [home-page]]\n   [cinemart.about.view :refer [about-page]]\n   [cinemart.movie.view :refer [movie]]\n   [cinemart.login.view :refer [login]]\n   [cinemart.signup.view :refer [signup]]\n   [re-frame.core :refer [dispatch]]))\n\n(defn href\n  \"Return relative url for given route, url can be html links\"\n  ([k]\n   (href k nil nil))\n  ([k params]\n   (href k params nil))\n  ([k params query]\n   (rfe/href k params query)))\n\n(def routes\n  [\"/\"\n   [\"\"\n    {:name      ::home\n     :link-text \"home\"\n     :view home-page\n     :hidden false\n     :controllers\n     [{;; Do whatever initialization needed for home page\n       ;; I.e (re-frame/dispatch [::events/load-something-with-ajax])\n       :start (fn [& params] (js/console.log \"Entering home page\"))\n       ;; Teardown can be done here.\n       :stop  (fn [& params] (js/console.log \"Leaving home page\"))}]}]\n   [\"about\"\n    {:name      ::about\n     :link-text \"about\"\n     :view about-page\n     :hidden false\n     :controllers\n     [{:start (fn [params] (js/console.log params))\n       :stop  (fn [params] (js/console.log \"Leaving sub-page 1\"))}]}]\n   [\"movie/:id\"\n    {:name ::movie\n     :link-text \"movie\"\n     :view movie\n     :hidden true\n     :controllers [{:parameters {:path [:id]}\n                    :start (fn [params] (dispatch\n                                         [::movie-events/fetch-movie\n                                          (-> params :path :id)]))}]}]\n   [\"login\"\n    {:name      ::login\n     :link-text \"log in\"\n     :view login\n     :auth? false\n     :hidden false\n     :controllers\n     [{:identity (fn [match]\n                   (js/console.log match)\n                   (get-in match [:data :auth?]))\n       :start (fn [auth?] (js/console.log auth?))\n       :stop  (fn [& params] (js/console.log \"Leaving sub-page login\"))}]}]\n   [\"signup\"\n    {:name      ::signup\n     :link-text \"sign up\"\n     :view signup\n     :auth? false\n     :hidden false}]\n   [\"profile\"\n    {:name      ::profile\n     :link-text \"profile\"\n     :view about-page\n     :auth? true\n     :hidden false\n     :controllers\n     [{:start (fn [& params] (js/console.log \"Entering sub-page 1\"))\n       :stop  (fn [& params] (js/console.log \"Leaving sub-page 1\"))}]}]])\n\n(defn on-navigate [new-match]\n  (when new-match\n    (dispatch [::events/navigated new-match])))\n\n(def router (rf/router routes {:data {:coercion rss/coercion}}))\n\n(defn init-routes!\n  []\n  (println \"init routes\")\n  (rfe/start! router on-navigate {:use-fragment false}))\n\n"]}