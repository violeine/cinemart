{"version":3,"sources":["cinemart/core.cljs"],"mappings":";AAaA,AAAA,AAAMA;AAAN,AACE,AAAA,AAAAC,AAAMC,AAAe,AAAA,AAAA,AAACC;AAAtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEIC,AAAgBC,AACOH,AACxB,AAAA,AAAA,AAAA,AAAMA,AACH,AAAA,AAAA,AAAA,AAAIA,AACNI,AACAC;;AAEN,AAAA,AAAMC;AAAN,AACE,AAAMC;AAAN,AACE,AAAA,AAACC;;AADH;;;AAGF,AAAA,AAAuBC;AAAvB,AACE,AAACC;;AACD,AAACC;;AACD,AAAMC,AAAQ,AAAA,AAAiBC;AAA/B,AACE,AAACC,AAA+BF;;AAChC,AAAA,AAACG,AAAajB,AAAac;;AAE/B,AAAA,AAAeI;AAAf,AACE,AAAA,AAAA,AAACC;;AACD,AAACX;;AACD,AAACG","names":["cinemart.core/hello-world","cljs.core/deref","current-route","re_frame.core.subscribe","cinemart.components.header/header","cinemart.router/router","cinemart.components.footer/footer","cinemart.notification.view/notification","cinemart.core/dev-setup","cinemart.config/debug?","cljs.core.println","cinemart.core/mount-root","re-frame.core/clear-subscription-cache!","cinemart.router/init-routes!","root-el","js/document","reagent.dom/unmount-component-at-node","reagent.dom.render","cinemart.core/init","re-frame.core/dispatch-sync"],"sourcesContent":["(ns cinemart.core\n  (:require\n    [reagent.dom :as rdom]\n    [re-frame.core :as rf]\n    [cinemart.events :as events]\n    [cinemart.subs :as subs]\n    [cinemart.config :as config]\n    [cinemart.router :as rt]\n    [day8.re-frame.http-fx]\n    [cinemart.notification.view :refer [notification]]\n    [cinemart.components.footer :refer [footer]]\n    [cinemart.components.header :refer [header]]))\n\n(defn hello-world []\n  (let [current-route @(rf/subscribe [::subs/current-route])]\n    [:div.flex.flex-col.justify-between.min-h-screen\n     [header {:routes rt/router\n              :current-route current-route}]\n     (when current-route\n       [(-> current-route :data :view)])\n     [footer]\n     [notification]]))\n\n(defn dev-setup []\n  (when config/debug?\n    (println \"dev mode\")))\n\n(defn ^:dev/after-load mount-root []\n  (rf/clear-subscription-cache!)\n  (rt/init-routes!)\n  (let [root-el (.getElementById js/document \"app\")]\n    (rdom/unmount-component-at-node root-el)\n    (rdom/render [hello-world] root-el)))\n\n(defn ^:export init []\n  (rf/dispatch-sync [::events/init-db])\n  (dev-setup)\n  (mount-root))\n"]}