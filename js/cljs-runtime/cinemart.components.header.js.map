{"version":3,"sources":["cinemart/components/header.cljs"],"mappings":"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","names":["p__29283","map__29284","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cinemart.components.header/header","routes","current-route","cljs.core/deref","auth?","re_frame.core.subscribe","cinemart.components.icons/i-film","iter__4529__auto__","s__29287","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__29289","cljs.core/chunk-buffer","i__29288","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29286","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","route-name","reitit.core/route-names","route","reitit.core/match-by-name","text","auth-route","cljs.core.get_in","hidden","cljs.core._EQ_","cljs.core/not","cinemart.router.href","re-frame.core/dispatch","cljs.core/chunk-first"],"sourcesContent":["(ns cinemart.components.header\n  (:require [reitit.core :as r]\n            [cinemart.router :as rt]\n            [re-frame.core :as rf]\n            [cinemart.login.events :as events]\n            [cinemart.components.icons :refer [i-film]]))\n\n(defn header\n  [{:keys [routes current-route]}]\n  (let [auth? @(rf/subscribe [:auth?])]\n    [:header.bg-gray-800\n     [:nav.xl:container.mx-auto.flex.py-2.px-3\n      [:a.mr-auto.text-3xl.text-gray-400.font-bold.flex {:href \"/\"}\n       [i-film {:class [\"w-8\" \"mr-3\"]}] \"cinemart\"]\n      [:div.my-auto\n       (for [route-name (r/route-names routes)\n             :let [route (r/match-by-name routes route-name)\n                   text (-> route :data :link-text)\n                   auth-route (get-in route [:data :auth?] :always)\n                   hidden (get-in route [:data :hidden])]\n             :when (and (or (= auth-route auth?) (= auth-route :always))\n                        (not hidden))]\n         (cond\n           (= route-name ::rt/signup) [:a.mr-2.text-xl.rounded.border-solid.border-gray-500.text-gray-500.border-2.p-2\n                                       {:href (rt/href route-name)\n                                        :key route-name\n                                        :class (when (= route-name\n                                                        (-> current-route :data :name))\n                                                 [\"text-purple-500\" \"border-purple-500\"])}\n                                       text]\n           :else [:a.mr-2.text-xl.text-gray-500 {:class (when (= route-name\n                                                                 (-> current-route :data :name))\n                                                          [\"text-purple-500\"])\n                                                 :href (rt/href route-name)\n                                                 :key route-name}\n                  text]))\n       (when auth?\n         [:a.mr-2.text-xl.rounded.border-solid.border-gray-500.text-gray-500.border-2.p-2 {:href \"#\"\n                                                                                           :class \"text-red-500\"\n                                                                                           :on-click #(rf/dispatch [::events/logout])} \"Log out\"])]]]))\n"]}