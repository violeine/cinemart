{"version":3,"sources":["cinemart/about/view.cljs"],"mappings":";AAOA,AAAA,AAAMA;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAKC,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAw7E+C,AAAAuB,AAAA5B;AAx7E/CM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AACYG,AAAI,AAAA,AAAA,AAACC,AAAOF,AAAWF;AACvBK,AAAK,AAAA,AAAA,AAACD,AAAOF,AAAWF;AAFpC,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIWe;;AAJX,AAKe,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AACyB,AAAA,AAAmBN,AACnBA;;AAPzC,AAAA,AAAA,AAAA,AAAA,AAAA,AAQIK,AACD,AAAA,AAAmBL;;AATtB,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AACYG,AAAI,AAAA,AAAA,AAACC,AAAOF,AAAWF;AACvBK,AAAK,AAAA,AAAA,AAACD,AAAOF,AAAWF;AAFpC,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIWK;;AAJX,AAKe,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AACyB,AAAA,AAAmBN,AACnBA;;AAPzC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAL,AAAA,AAAAI,AAAAnB,AAQIyB,AACD,AAAA,AAAmBL;;;AATtB;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAAW,AAACsB,AAAKC;AANrB,AAAA,AAAA,AAAA,AAAA;AAAA,AAiBiB,AAAA,AAAA,AAACK;AAjBlB","names":["cinemart.about.view/about-page","cinemart.components.container/container","iter__4529__auto__","s__29173","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__29175","cljs.core/chunk-buffer","i__29174","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29172","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","noti","cljs.core/keys","cinemart.notification.view/noti-type","css","cljs.core.get_in","icon","re-frame.core/dispatch-sync","re-frame.core/dispatch","cljs.core/chunk-first"],"sourcesContent":["(ns cinemart.about.view\n  (:require [cinemart.components.container :refer [container]]\n            [cinemart.notification.events :as noti]\n            [cinemart.notification.view :refer [noti-type]]\n            [cinemart.events :as fetch]\n            [re-frame.core :as rf]))\n\n(defn about-page []\n  [container\n   {}\n   [:<>\n    [:p \"This app is written in Clojurescript with reframe\n       and written by me & homies\"]\n    (for [noti (keys noti-type)\n          :let [css (get-in noti-type [noti :css])\n                icon (get-in noti-type [noti :icon])]]\n      [:a.mt-3.py-2.px-3.rounded.mx-2.w-64.flex.text-white\n       {:class css\n        :on-click #(rf/dispatch-sync [::noti/notify\n                                      {:text (str \"this is an \" noti)\n                                       :type noti}])}\n       [icon {:class [\"w-8\" \"mr-5\"]}]\n       (str \"this is an \" noti)])\n    [:button.mt-3.py-2.px-3.bg-blue-300.rounded\n     {:on-click #(rf/dispatch [::fetch/test-fetch])}\n     \"Fetch something\"]]])\n"]}