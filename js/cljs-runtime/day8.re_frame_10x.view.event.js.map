{"version":3,"sources":["day8/re_frame_10x/view/event.cljs"],"mappings":"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","names":["day8.re-frame-10x.view.event/code-border","day8.re-frame-10x.common-styles/white-background-border-color","day8.re-frame-10x.view.event/event-styles","day8.re-frame-10x.common-styles/navbar-tint-lighter","day8.re-frame-10x.common-styles/navbar-text-color","day8.re-frame-10x.common-styles/gs-19","day8.re-frame-10x.common-styles/gs-12","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/px-","day8.re-frame-10x.common-styles/expansion-button-horizontal-padding","day8.re-frame-10x.view.event/no-event-instructions","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/p","day8.re-frame-10x.utils.re-com/hyperlink-href","day8.re-frame-10x.view.event/code-header","code-execution-id","line","cljs.core/deref","open?-path","G__20280","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/subscribe","max-column-width","G__20281","trace-id","open?","cljs.core.get_in","G__20282","line-str","day8.re_frame_10x.utils.pretty_print_condensed.pr_str_truncated","=>str","result-length","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.utils.re-com/box","event","G__20283","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/dispatch","cljs.core/not","day8.re-frame-10x.utils.utils/copy-to-clipboard","cljs.core.pr_str","cljs.core/List","G__20288","day8.re-frame-10x.view.event/code-block","day8.re-frame-10x.view.components/simple-render","G__20290","var_args","G__20292","day8.re-frame-10x.view.event/re-seq-idx","js/Error","re","s","day8.re_frame_10x.view.event.re_seq_idx","offset","temp__5739__auto__","matches","match-str","match-vals","cljs.core/vec","match-index","cljs.core/cons","cljs.core/LazySeq","post-idx","x__4214__auto__","y__4215__auto__","cljs.core.subs","day8.re-frame-10x.view.event/collapse-whitespace-and-index","s'","clojure.string/replace","v","i-s","i-s'","cljs.core._EQ_","cljs.core.conj","cljs.core/count","cljs.core.nth","day8.re-frame-10x.view.event/find-bounds","form-str","search-str","num-seen","vec__20348","reindex","esc-str","js/goog.string.regExpEscape","regex","cljs.core/re-pattern","results","and__4115__auto__","cljs.core/seq","vec__20351","vec__20354","result","_","pre-match","matched-form","index","start","stop","G__20357","clojure.string.index_of","length","end","G__20358","day8.re-frame-10x.view.event/event-expression","scroll-pos","cljs.core.atom","day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core/create-class","this","node","day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.dom/dom-node","cljs.core/reset!","vec__20359","highlighted-form","G__20362","G__20363","show-all-code?","G__20364","start-index","end-index","before","highlight","after","cljs.core.gensym","day8.re-frame-10x.common-styles/white-background-color","G__20365","day8.re-frame-10x.view.components/highlight","day8.re-frame-10x.view.event/repl-msg-area","repl-msg-state","G__20367","cljs.core.get","G__20368","day8.re-frame-10x.view.event/repl-section","execution-order?","G__20372","day8.re-frame-10x.utils.re-com/checkbox","G__20373","day8.re-frame-10x.utils.re-com/hyperlink","day8.re-frame-10x.common-styles/gs-7s","G__20375","day8.re-frame-10x.utils.re-com/hyperlink-info","day8.re-frame-10x.view.event/indent-block","indent-level","first?","cljs.core.doall","iter__4529__auto__","s__20377","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__20379","cljs.core/chunk-buffer","i__20378","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__20376","cljs.core/chunk-rest","cljs.core/first","cljs.core/rest","num","cljs.core.range","day8.re-frame-10x.common-styles/standard-background-color","day8.re-frame-10x.view.event/event-fragments","unordered-fragments","code-exec-id","code-open?","G__20380","max-frags","G__20381","fragments","cljs.core.sort_by","s__20383","b__20385","i__20384","iter__20382","frag","cljs.core.take","id","G__20386","G__20389","G__20387","G__20390","G__20388","G__20391","day8.re-frame-10x.utils.re-com/label","day8.re-frame-10x.common-styles/gs-5s","day8.re-frame-10x.view.event/event-code","code-traces","G__20392","code-execution","cljs.core.remove","cljs.core/fn?","day8.re-frame-10x.view.event/render","epoch-id","G__20393","day8.re-frame-10x.common-styles/gs-19s","day8.re-frame-10x.utils.re-com/gap-f","cljs.core/chunk-first"],"sourcesContent":["(ns day8.re-frame-10x.view.event\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.common-styles :as common]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units :as units]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core :as reagent]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.dom :as rdom]\n            [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core :as rf]\n            [zprint.core :as zp]\n            [goog.string]\n            [clojure.string :as str]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [day8.re-frame-10x.utils.utils :as utils])\n  (:require-macros [day8.re-frame-10x.utils.macros :refer [with-cljs-devtools-prefs]]\n                   [day8.re-frame-10x.utils.re-com :refer [handler-fn]]))\n\n(def code-border (str \"1px solid \" common/white-background-border-color))\n\n\n(def event-styles\n  [:#--re-frame-10x--\n   [:.event-panel\n    {:padding \"19px 19px 0px 0px\"}]\n   [:.bold {:font-weight \"bold\"}]\n   [:.event-section]\n   [:.event-section--header\n    {:background-color common/navbar-tint-lighter\n     :color            common/navbar-text-color\n     :height           common/gs-19\n     :padding          [[0 common/gs-12]]\n     :overflow         \"hidden\"}]\n   [:.event-section--data\n    {:background-color \"rgba(100, 255, 100, 0.08)\"\n     :padding-left     (units/px- common/gs-12 common/expansion-button-horizontal-padding)\n     :overflow-x       \"auto\"\n     :overflow-y       \"hidden\"}]])\n\n\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n\n(defn no-event-instructions\n  []\n  [rc/v-box\n   :children [[rc/p {:style {:font-style \"italic\"}} \"Code trace is not available for this event\"]\n              [:br]\n              [rc/hyperlink-href\n               :label \"Instructions for enabling Event Code Tracing\"\n               :attr {:rel \"noopener noreferrer\"}\n               :target \"_blank\"\n               :href \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/EventCodeTracing.md\"]]])\n\n\n(defn code-header\n  [code-execution-id line]\n  (let [open?-path       [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]\n        max-column-width @(rf/subscribe [:code/max-column-width])\n        trace-id         code-execution-id\n        open?            (get-in @(rf/subscribe [:code/code-open?]) open?-path)\n        line-str         (pp/pr-str-truncated max-column-width (:form line))\n        =>str            \"=> \"\n        result-length    (- max-column-width (count =>str) (count line-str))]\n    [rc/h-box\n     :class \"code-fragment__content\"\n     :size \"1\"\n     :align :center\n     :style {:border   code-border\n             :overflow \"hidden\"\n             :padding  \"0px 6px\"}\n     :children [[rc/box\n                 :width \"17px\"\n                 :height \"17px\"\n                 :class \"noselect\"\n                 :style {:cursor \"pointer\"\n                         :color  \"#b0b2b4\"}\n                 :attr {:on-click (handler-fn (rf/dispatch [:code/set-code-visibility open?-path (not open?)]))}\n                 :child [rc/box\n                         :margin \"auto\"\n                         :child [:span.arrow (if open? \"\u25bc\" \"\u25b6\")]]]\n                [rc/h-box\n                 :size \"1\"\n                 :style {:overflow \"hidden\"}\n                 :children [[rc/box\n                             :style {:margin-left \"2px\"\n                                     :white-space \"nowrap\"}\n                             :child [:code line-str]]\n                            [rc/box\n                             :class \"code-fragment__result\"\n                             :style {:flex        \"1\"\n                                     :margin-left \"8px\"\n                                     :white-space \"nowrap\"}\n                             :child [:code =>str (when (pos? result-length)\n                                                   (pp/pr-str-truncated result-length (:result line)))]]]]\n                [rc/box\n                 :class \"code-fragment__button\"\n                 :attr {:title    \"Copy to the clipboard, an expression that will return this form's value in the cljs repl\"\n                        :on-click (handler-fn (do (utils/copy-to-clipboard (pr-str (list 'day8.re-frame-10x/traced-result trace-id (:id line))))\n                                                  (rf/dispatch [:code/repl-msg-state :start])))}\n                 :child \"repl\"]]]))\n\n\n(defn code-block\n  [code-execution-id line]\n  [rc/box\n   :size \"1\"\n   :style {:background-color \"rgba(100, 255, 100, 0.08)\"\n           :border           code-border\n           :margin-top       \"-1px\"\n           :overflow-x       \"auto\"\n           :overflow-y       \"hidden\"\n           :padding          \"0px 3px\"}\n   :child [components/simple-render (:result line) [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]]])\n\n(defn- re-seq-idx\n  \"Like re-seq but returns matches and indices\"\n  ([re s] (re-seq-idx re s 0))\n  ([re s offset]  ;; copied from re-seq* impl https://github.com/clojure/clojurescript/blob/0efe8fede9e06b8e1aa2fcb3a1c70f66cad6392e/src/main/cljs/cljs/core.cljs#L10014\n   (when-some [matches (.exec re s)]\n     (let [match-str (aget matches 0)\n           match-vals (if (== (.-length matches) 1)\n                        match-str\n                        (vec matches))\n           match-index (.-index matches)]\n       (cons [match-vals, (+ offset match-index)]\n             (lazy-seq\n              (let [post-idx (+ (.-index matches)\n                                (max 1 (.-length match-str)))]\n                (when (<= post-idx (.-length s))\n                  (re-seq-idx re (subs s post-idx) (+ offset post-idx))))))))))\n\n(defn collapse-whitespace-and-index\n  \"given a string argument `s` it will return a vector of two values:\n     - a modified version of `s`, call it s'\n     - a vector of indexes, v\n   s' will be a copy of s in which all consecutive whitespace is collapsed to one whitespace\n   v  will be a vector of index for characters in s' back to the original s\n   For example:\n      (collapse-whitespace-and-index \\\"a b  c\\\")\n   will return\n       [\\\"a b c\\\" [0 1 2 3 5]]     ;; notice that the 4 is not there\n   \" \n  [s]\n  (let [s' (clojure.string/replace s #\"\\s+\" \" \") ;; generate a new string with whitespace replaced \n        v (loop [v []     ;; Build up an index between the string with and without whitespace\n                       i-s 0\n                       i-s' 0] \n                  (cond \n                    (= (count s') i-s') (conj v (count s)) ;; we have reached the end of both strings\n                    (= (nth s i-s) (nth s' i-s')) \n                       (recur (conj v i-s) (inc i-s) (inc i-s')) ;; when we have a match save the index\n                    :else (recur v (inc i-s) i-s')))]    ;; no match (whitespace) increment the index on the orignal string\n    [s' v]))\n\n(defn find-bounds\n  \"Try and find the bounds of the form we are searching for. Uses some heuristics to\n  try and avoid matching partial forms, e.g. 'default-|weeks| for the form 'weeks.\"\n  [form-str search-str num-seen]\n  (if (nil? search-str)\n    [0 0]  ;; on mouse out etc\n    (let [[form-str reindex]   (collapse-whitespace-and-index form-str) ;; match without whitespace\n          esc-str    (goog.string.regExpEscape search-str)\n          regex      (str \"(\\\\s|\\\\(|\\\\[|\\\\{)\" \"(\" esc-str \")(\\\\s|\\\\)|\\\\]|\\\\})\")\n          re         (re-pattern regex)\n          results    (re-seq-idx re form-str)]\n      ;; (js/console.log \"FIND-BOUNDS\" form-str  regex reindex results) \n      (if (and search-str num-seen (seq results) (>= (count results)  num-seen))\n        (let [result                              (nth results (dec num-seen))\n              [[_ pre-match matched-form] index]  result\n              index                               (+ index (count pre-match))\n              start                               (nth reindex index)\n              stop                                (nth reindex (+ index (count matched-form)))]\n          [start stop])\n      ;; If the regex fails, fall back to string index just in case.\n        (let [start  (some->> form-str \n                              (str/index-of (pr-str search-str))\n                              (nth reindex))\n              length (if (some? start)\n                       (count (pr-str search-str))\n                       1)\n              end    (some->> start\n                              (+ length)\n                              (nth reindex))]\n          [start end])))))\n\n(defn event-expression\n  []\n  (let [scroll-pos (atom {:top 0 :left 0})]\n    (reagent/create-class\n      {:component-will-update\n       (fn event-expression-component-will-update [this]\n         (let [node (rdom/dom-node this)]\n           (reset! scroll-pos {:top (.-scrollTop node) :left (.-scrollLeft node)})))\n\n       :component-did-update\n       (fn event-expression-component-did-update [this]\n         (let [node (rdom/dom-node this)]\n           (set! (.-scrollTop node) (:top @scroll-pos))\n           (set! (.-scrollLeft node) (:left @scroll-pos))))\n\n       :display-name\n       \"event-expression\"\n\n       :reagent-render\n       (fn\n         []\n         (let [highlighted-form @(rf/subscribe [:code/highlighted-form])\n               form-str         @(rf/subscribe [:code/current-zprint-form])\n               show-all-code?   @(rf/subscribe [:code/show-all-code?])\n               [start-index end-index] (find-bounds form-str (:form highlighted-form) (:num-seen highlighted-form))\n               before           (subs form-str 0 start-index)\n               highlight        (subs form-str start-index end-index)\n               after            (subs form-str end-index)]\n           ; DC: We get lots of React errors if we don't force a creation of a new element when the highlight changes. Not really sure why...\n           ;; Possibly relevant? https://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node\n           ^{:key (gensym)}\n           [rc/box\n            :style {:max-height       (when-not show-all-code? (str (* 10 17) \"px\")) ;; Add scrollbar after 10 lines\n                    :overflow         \"auto\"\n                    :border           code-border\n                    :background-color common/white-background-color\n                    :white-space      \"pre\"} ;; TODO: This is a quick fix for issue #270\n            :attr {:on-double-click (handler-fn (rf/dispatch [:code/set-show-all-code? (not show-all-code?)]))}\n            :child (if (some? highlighted-form)\n                     [components/highlight {:language \"clojure\"}\n                      (list ^{:key \"before\"} before\n                            ^{:key \"hl\"} [:span.code-listing--highlighted highlight]\n                            ^{:key \"after\"} after)]\n                     [components/highlight {:language \"clojure\"}\n                      form-str])]))})))\n\n\n(defn repl-msg-area\n  []\n  (let [repl-msg-state @(rf/subscribe [:code/repl-msg-state])]\n    (when (get #{:running :re-running} repl-msg-state)\n      ^{:key (gensym)}\n      [:div\n       {:style            {:opacity            \"0\"\n                           :color              \"white\"\n                           :background-color   \"green\"\n                           :padding            \"0px 4px\"\n                           :white-space        \"nowrap\"\n                           :overflow           \"hidden\"\n                           :animation-duration \"5000ms\"\n                           :margin-right       \"5px\"\n                           :animation-name     \"fade-clipboard-msg-re-frame-10x\"}\n        :on-animation-end #(rf/dispatch [:code/repl-msg-state :end])}\n       \"Clipboard now contains text for pasting into the REPL\"])))\n\n\n(defn repl-section\n  []\n  (let [execution-order?    @(rf/subscribe [:code/execution-order?])]\n   [rc/h-box\n    :height \"23px\"\n    :align :end\n    :style {:margin-bottom \"2px\"}\n    :children [[rc/checkbox\n                :model execution-order?\n                :label \"show trace in execution order\"\n                :on-change (handler-fn (rf/dispatch [:code/set-execution-order (not execution-order?)]))] \n               [rc/box\n                :size \"1\"\n                :child \"\"]\n               [repl-msg-area]\n               [rc/box\n                :size \"1\"\n                :child \"\"]\n               [rc/hyperlink\n                :label \"repl requires\"\n                :style {:margin-right common/gs-7s}\n                :attr {:title \"Copy to the clipboard, the require form to set things up for the \\\"repl\\\" links below\"}\n               ;; Doing this in a list would be nicer, but doesn't let us use ' as it will be expanded before we can create the string.\n                :on-click #(do (utils/copy-to-clipboard \"(require '[day8.re-frame-10x])\")\n                               (rf/dispatch [:code/repl-msg-state :start]))]\n               [rc/hyperlink-info \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/UsingTheRepl.md\"]]]))\n\n\n(defn indent-block\n  [indent-level first?]\n  [rc/h-box\n   :children (doall\n               (for [num (range indent-level)]\n                 [rc/box\n                  :width \"12px\"\n                  :style {:background-color common/standard-background-color\n                          :border-top       (when first? code-border)\n                          :border-left      code-border}\n                  :child \"\"]))])\n\n\n(defn event-fragments\n  [unordered-fragments code-exec-id]\n  (let [code-open?       @(rf/subscribe [:code/code-open?])\n        max-frags        50\n        execution-order? @(rf/subscribe [:code/execution-order?])\n        fragments        (if execution-order?\n                           unordered-fragments \n                           (sort-by :syntax-order unordered-fragments))]\n    [rc/v-box\n     :size \"1\"\n     :style {:overflow-y \"auto\"}\n     :children [(doall\n                  (for [frag (take max-frags fragments)]\n                    (let [id     (:id frag)\n                          first? (zero? id)]\n                      ^{:key id}\n                      [rc/v-box\n                       :class \"code-fragment\"\n                       :style {:margin-top (when-not first? \"-1px\")}\n                       :attr {:on-mouse-enter (handler-fn (rf/dispatch [:code/hover-form frag]))\n                              :on-mouse-leave (handler-fn (rf/dispatch [:code/exit-hover-form frag]))}\n                       :children [[rc/h-box\n                                   :children [[indent-block (:indent-level frag) first?]\n                                              [code-header code-exec-id frag]]]\n                                  (when (get-in code-open? [@(rf/subscribe [:epochs/current-epoch-id]) code-exec-id id])\n                                    [rc/h-box\n                                     :children [[indent-block (:indent-level frag) false]\n                                                [code-block code-exec-id frag id]]])]])))\n                (when (> (count fragments) max-frags)\n                  [rc/label\n                   :style {:margin-top common/gs-5s\n                           :font-style \"italic\"}\n                   :label (str \"(only showing first \" max-frags \" of \" (count fragments) \" traces)\")])]]))\n\n\n(defn event-code\n  []\n  (let [code-traces    @(rf/subscribe [:code/current-code])\n        code-execution (first code-traces)                  ;; Ignore multiple code executions for now\n        #_#_debug? @(rf/subscribe [:settings/debug?])\n        #_#_highlighted-form (rf/subscribe [:code/highlighted-form])]\n    (if-not code-execution\n      [no-event-instructions]\n      [rc/v-box\n       :size \"1 1 auto\"\n       :class \"code-panel\"\n       :children [#_(when debug? [:pre \"Hover \" (subs (pr-str @highlighted-form) 0 50) \"\\n\"])\n                  [event-expression]\n                  [repl-section]\n                  [event-fragments (->> (:code code-execution)\n                                        (remove (fn [line] (fn? (:result line)))))\n                   (:trace-id code-execution)]]])))\n\n\n(defn render []\n  (let [epoch-id @(rf/subscribe [:epochs/current-epoch-id])]\n    ;; Create a new id on each panel because Reagent can throw an exception if\n    ;; the data provided in successive renders is sufficiently different.\n    ^{:key epoch-id}\n    [rc/v-box\n     :size \"1\"\n     :class \"event-panel\"\n     :gap common/gs-19s\n     :children [[event-code]\n                [rc/gap-f :size \"0px\"]]]))\n"]}