{"version":3,"sources":["day8/re_frame/debux/common/util.cljc"],"mappings":"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","names":["day8.re-frame.debux.common.util/map->seq","m","cljs.core.reduce","p__24515","vec__24516","cljs.core.nth","r","k","v","cljs.core.concat","day8.re-frame.debux.common.util/sequential-zip","root","p1__24519#","clojure.zip/zipper","cljs.core/sequential?","cljs.core/map?","x","cljs.core/with-meta","cljs.core/meta","children","cljs.core/vector?","cljs.core/vec","p__24528","vec__24529","cljs.core.assoc","cljs.core.partition","day8.re-frame.debux.common.util/right-or-next","loc","temp__5733__auto__","right","clojure.zip/right","clojure.zip/node","rightmost","clojure.zip/down","clojure.zip/rightmost","clojure.zip/next","day8.re-frame.debux.common.util/auto-gensym-pattern","day8.re-frame.debux.common.util/anon-gensym-pattern","day8.re-frame.debux.common.util/named-gensym-pattern","day8.re-frame.debux.common.util/anon-param-pattern","day8.re-frame.debux.common.util/form-tree-seq","form","cljs.core/tree-seq","cljs.core/seq","day8.re-frame.debux.common.util/with-gensyms-names","mapping","gen-name","result","name","cljs.core/contains?","cljs.core/iterate","cljs.core/inc","p1__24532#","cljs.core.map","p1__24534#","cljs.core.filter","cljs.core/first","name-for","sym-name","groups","cljs.core/re-matches","cljs.core/second","new-name","p1__24535#","cljs.core/Symbol","cljs.core/namespace","cljs.core/name","p__24539","map__24540","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","day8.re-frame.debux.common.util/with-symbols-names","context","refers","aliases","state","sym","cljs.core._EQ_","cljs.core.pr_str","p1__24538#","day8.re-frame.debux.common.util/tidy-macroexpanded-form","clojure.zip/end?","clojure.zip/root","clojure.zip/edit","cljs.core.symbol","day8.re-frame.debux.common.util/send-form!","re-frame.trace/is-trace-enabled?","new-trace__21055__auto__","cljs.core.merge","cljs.core.update","re-frame.trace/*current-trace*","cljs.core/merge","cljs.core.dissoc","day8.re-frame.debux.common.util/send-trace!","code-trace","code","cljs.core.get_in","cljs.core.conj","day8.re-frame.debux.common.util/indent-level*","cljs.core.atom","day8.re-frame.debux.common.util/reset-indent-level!","cljs.core/reset!","day8.re-frame.debux.common.util/print-seq-length*","day8.re-frame.debux.common.util/set-print-seq-length!","num","day8.re-frame.debux.common.util/cljs-env?","env","cljs.core/boolean","day8.re-frame.debux.common.util/vec->map","cljs.core/array-map","cljs.core.mapcat","cljs.core.sequence","cljs.core/List","elm","cljs.core.keyword","day8.re-frame.debux.common.util/replace-&","clojure.walk/postwalk-replace","day8.re-frame.debux.common.util/take-n-if-seq","n","cljs.core/seq?","cljs.core.take","or__4126__auto__","cljs.core/deref","day8.re-frame.debux.common.util/truncate","s","cljs.core/count","day8.re-frame.debux.common.util/make-bars-","times","cljs.core/str","cljs.core.repeat","day8.re-frame.debux.common.util/make-bars","cljs.core/memoize","day8.re-frame.debux.common.util/prepend-bars","line","indent-level","day8.re-frame.debux.common.util/print-form-with-indent","cljs.core.println","cljs.core/flush","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","day8.re-frame.debux.common.util/form-header","p__24554","vec__24555","seq24552","G__24553","cljs.core/next","self__4723__auto__","msg","and__4115__auto__","day8.re-frame.debux.common.util/prepend-blanks","lines","p1__24558#","cljs.core.mapv","day8.re-frame.debux.common.util/pprint-result-with-indent","res","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__24560","cljs.core/*print-newline*","*print-fn*-orig-val__24561","cljs.core/*print-fn*","*print-newline*-temp-val__24562","*print-fn*-temp-val__24563","x__4668__auto__","cljs.pprint.pprint","pprint","clojure.string/trim","clojure.string.split","p1__24559#","clojure.string.join","day8.re-frame.debux.common.util/insert-blank-line","day8.re-frame.debux.common.util/parse-opts","opts","acc","f","cljs.core/empty?","cljs.core/nnext","fexpr__24566","fexpr__24567","p__24568","vec__24569","day8.re-frame.debux.common.util/quote-val","day8.re-frame.debux.common.util/quote-vals","cljs.core.into","day8.re-frame.debux.common.util/include-recur?","G__24573","fexpr__24572","cljs.core.comp","cljs.core/set","cljs.core/flatten","day8.re-frame.debux.common.util/o-skip?","day8.re-frame.debux.common.util/spy-first","quoted-form","indent","js/Error","cljs.core/integer?","cljs.core.prn_str","G__24575","G__24576","day8.re-frame.debux.common.util/remove-d","day8.re-frame.debux.common.util/spy-last","G__24577","G__24578","day8.re-frame.debux.common.util/spy-comp","arg","G__24579","G__24580","day8.re-frame.debux.common.util/debux-skip-symbol?","day8.re-frame.debux.common.util/spy-first?","d-sym","node","clojure.zip/replace","cljs.core/last"],"sourcesContent":["(ns day8.re-frame.debux.common.util\n  \"Utilities common for clojure and clojurescript\"\n  (:refer-clojure :exclude [coll?])\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pp]\n            [clojure.zip :as z]\n            [clojure.walk :as walk]\n            [cljs.analyzer.api :as ana]\n            [clojure.repl :as repl]\n            [re-frame.trace :as trace]))\n\n(defn map->seq[m]\n  (reduce\n    (fn [r [k v]]\n      (concat r [k v]))\n    []\n    m))\n  \n;;; zipper\n(defn sequential-zip [root]\n  (z/zipper #(or (sequential? %) (map? %)) \n            (fn [x]\n              (cond \n                (map? x)    (with-meta (map->seq x) (meta x))\n                :else       x))\n            (fn [x children]\n              (cond \n                (vector? x) (with-meta (vec children) (meta x))\n                (map? x)    (with-meta\n                              (reduce\n                                (fn [r [k v]]\n                                    (assoc r k v))\n                                  {}\n                                  (partition 2 children))\n                              (meta x))\n                :else children))\n            root))\n\n(defn right-or-next [loc]\n  (if-let [right (z/right loc)]\n    ;; in case of (... (+ a b) c) or (... a b)\n    right\n    (if (sequential? (z/node loc))\n      (let [rightmost (-> loc z/down z/rightmost)]\n        (if (sequential? (z/node rightmost))\n          ;; in case of (... (+ a (* b c)))\n          (recur rightmost)\n\n          ;; in case of (... (+ a b))\n          (-> rightmost z/next)))\n\n      ;; in case of (... a)\n      (-> loc z/next))))\n\n\n;; Tidy up macroexpansions\n\n(def auto-gensym-pattern #\"(.*)__\\d+__auto__\")              ;; form#\n(def anon-gensym-pattern #\"G__\\d+\")                         ;; (gensym)\n(def named-gensym-pattern #?(:clj #\"(.*?)\\d{4,}\"            ;; (gensym 'form), must match at least 4 numbers so we don't catch symbols with trailing numbers\n                             :cljs #\"(.*?)\\d{2,}\"))         ;; (gensym 'form), must match at least 2 numbers for cljs so we don't catch symbols with trailing numbers\n(def anon-param-pattern #\"p(\\d+)__\\d+#\")                    ;; #(%1 %2 %3)\n\n(defn form-tree-seq [form]\n  (tree-seq\n    sequential?\n    seq\n    form))\n\n(defn with-gensyms-names\n  \"Reverse gensym'd names to their original source form to make them easier to read.\"\n  [form mapping]\n  (let [gen-name (fn [result name]\n                   (if-not (contains? result (str name \"#\"))\n                     (str name \"#\")\n                     (->> (iterate inc 2)\n                          (map #(str name % \"#\"))\n                          (filter #(not (contains? result %)))\n                          (first))))\n        name-for (fn [result sym-name]\n                   (if-let [groups (re-matches auto-gensym-pattern sym-name)]\n                     (gen-name result (second groups))\n                     (if (re-matches anon-gensym-pattern sym-name)\n                       (gen-name result \"gensym\")\n                       (if-let [groups (re-matches named-gensym-pattern sym-name)]\n                         (gen-name result (second groups))\n                         (if-let [groups (re-matches anon-param-pattern sym-name)]\n                           (str \"%\" (second groups)))))))]\n    (reduce (fn [result sym-name]\n              (if (contains? result sym-name)\n                result\n                (if-let [new-name (name-for result sym-name)]\n                  (assoc result sym-name new-name)\n                  result)))\n            mapping\n            (->> (form-tree-seq form)\n                 (filter #(and (symbol? %) (nil? (namespace %))))\n                 (map name)))))\n\n(defn with-symbols-names\n  \"Tidy up fully qualified names that have aliases in the existing namespace.\"\n  ;; TODO: handle FQN's other than clojure.core\n  [form {:keys [context refers aliases] :as state} mapping]\n  (reduce (fn [result sym]\n            (if (= \"clojure.core\" (namespace sym))\n              (assoc result (pr-str sym) (name sym))\n              result))\n          mapping\n          (->> (form-tree-seq form)\n               ;; TODO: use qualified-symbol? once we are on Clojure 1.9\n               (filter #(and (symbol? %) (namespace %))))))\n\n(defn tidy-macroexpanded-form\n  \"Takes a macroexpanded form and tidies it up to be more readable by\n  unmapping gensyms and replacing fully qualified namespaces with aliases\n  or nothing if the function is referred.\"\n  [form state]\n  ;; Mapping is a mapping of String:String which represent symbols\n  (let [mapping (->> {}\n                     (with-gensyms-names form)\n                     (with-symbols-names form state))]\n    (loop [loc (sequential-zip form)]\n      (if (z/end? loc)\n        (z/root loc)\n        (if (symbol? (z/node loc))\n          (recur (z/next (z/edit loc (fn [sym] (symbol (get mapping (pr-str sym) sym))))))\n          (recur (z/next loc)))))))\n\n(defn send-form! [form]\n  (trace/merge-trace! {:tags {:form form}}))\n\n(defn send-trace! [code-trace]\n  (let [code (get-in trace/*current-trace* [:tags :code] [])]\n    ;; TODO: also capture macroexpanded form? Might be useful in some cases?\n    (trace/merge-trace!\n      {:tags {:code (conj code {:form (tidy-macroexpanded-form (:form code-trace) {}) \n                                :result (:result code-trace) \n                                :indent-level (:indent-level code-trace) \n                                :syntax-order (:syntax-order code-trace) \n                                :num-seen (:num-seen code-trace)})}})))\n\n;;; For internal debugging\n(defmacro d\n  \"The internal macro to debug dbg macro.\n   <form any> a form to be evaluated\"\n  [form]\n  `(let [return# ~form]\n     (println \">> dbg_:\" (pr-str '~form) \"=>\\n\" (pr-str return#) \"<<\")\n     return#))\n\n\n;;; indent-level control\n(def indent-level* (atom 1))\n\n(defn reset-indent-level! []\n  (reset! indent-level* 1))\n\n\n;;; print-seq-length\n(def print-seq-length* (atom 100))\n\n(defn set-print-seq-length! [num]\n  (reset! print-seq-length* num))\n\n\n;;; general\n(defmacro read-source [sym]\n  `(-> (repl/source ~sym)\n       with-out-str\n       read-string))\n\n(defn cljs-env? [env]\n  (boolean (:ns env)))\n\n(defn vec->map\n  \"Transsub-forms a vector into an array-map with key/value pairs.\n  (def a 10)\n  (def b 20)\n  (vec-map [a b :c [30 40]])\n  => {:a 10 :b 20 ::c :c :[30 40] [30 40]}\"\n  [v]\n  (apply array-map\n         (mapcat (fn [elm]\n                   `[~(keyword (str elm)) ~elm])\n                 v)))\n\n(defn replace-& [v]\n  (walk/postwalk-replace {'& ''&} v))\n\n\n\n;;; symbol with namespace\n#?(:clj\n   (defn- var->symbol [v]\n     (let [m    (meta v)\n           ns   (str (ns-name (:ns m)))\n           name (str (:name m))]\n       (symbol ns name))))\n\n#?(:clj\n   (defn- ns-symbol-for-clj [sym]\n     (if-let [v (resolve sym)]\n       (var->symbol v)\n       sym)))\n\n#?(:clj\n   (defn- ns-symbol-for-cljs [sym env]\n     (if-let [meta (ana/resolve env sym)]\n       ;; normal symbol\n       (let [[ns name] (str/split (str (:name meta)) #\"/\")]\n         ;; The special symbol `.` must be handled in the following special symbol part.\n         ;; However, the special symbol `.` returns meta {:name / :ns nil}, which may be a bug.\n         (if (nil? ns)\n           sym\n           (symbol ns name)))\n       ;; special symbols except for `.`\n       sym)))\n\n#?(:clj\n   (defn ns-symbol [sym & [env]]\n     (if (symbol? sym)\n       (if (cljs-env? env)\n         (ns-symbol-for-cljs sym env)\n         (ns-symbol-for-clj sym))\n       sym)))\n\n\n;;; print\n(defn take-n-if-seq [n result]\n  (if (seq? result)\n    (take (or n @print-seq-length*) result)\n    result))\n\n(defn truncate [s]\n  (if (> (count s) 70)\n    (str (.substring s 0 70) \" ...\")\n    s))\n\n(defn- make-bars-\n  [times]\n  (apply str (repeat times \"|\")))\n\n(def make-bars (memoize make-bars-))\n\n(defn prepend-bars\n  [line indent-level]\n  (str (make-bars indent-level) \" \" line))\n\n(defn print-form-with-indent\n  [form indent-level]\n  ;; TODO: trace this information somehow\n  (println (prepend-bars form indent-level))\n  (flush))\n\n(defn form-header [form & [msg]]\n  (str (truncate (pr-str form))\n       (and msg (str \"   <\" msg \">\"))\n       \" =>\"))\n\n\n(defn prepend-blanks\n  [lines]\n  (mapv #(str \"  \" %) lines))\n\n(defn pprint-result-with-indent\n  [result indent-level]\n  ;; TODO: trace this information somehow\n  (let [res    result\n        result (with-out-str (pp/pprint res))\n        pprint (str/trim result)]\n    (println (->> (str/split pprint #\"\\n\")\n                  prepend-blanks\n                  (mapv #(prepend-bars % indent-level))\n                  (str/join \"\\n\")))\n    (flush)))\n\n(defn insert-blank-line []\n  (println \" \")\n  (flush))\n\n\n;;; parse options\n(defn parse-opts\n  [opts]\n  (loop [opts opts\n         acc  {}]\n    (let [f (first opts)\n          s (second opts)]\n      (cond\n        (empty? opts)\n        acc\n\n        (number? f)\n        (recur (next opts) (assoc acc :n f))\n\n        (string? f)\n        (recur (next opts) (assoc acc :msg f))\n\n        (= f :if)\n        (recur (nnext opts) (assoc acc :condition s))\n\n        ;;; for clojurescript\n        (= f :js)\n        (recur (next opts) (assoc acc :js true))\n\n        (#{:once :o} f)\n        (recur (next opts) (assoc acc :once true))\n\n        (#{:style :s} f)\n        (recur (nnext opts) (assoc acc :style s))\n\n        (= f :clog)\n        (recur (next opts) (assoc acc :clog true))))))\n\n\n;;; quote the value parts of a map\n(defn quote-val [[k v]]\n  `[~k '~v])\n\n(defn quote-vals [m]\n  (->> (map quote-val m)\n       (into {})))\n\n\n;;; for recur processing\n(defn include-recur? [form]\n  (((comp set flatten) form) 'recur))\n\n#?(:clj\n   (defn final-target? [sym targets env]\n     (let [ns-sym (ns-symbol sym env)]\n       (or (get targets ns-sym)\n           (some #(= % ns-sym)\n                 '[clojure.core/defn clojure.core/defn- clojure.core/fn\n                   cljs.core/defn cljs.core/defn- cljs.core/fn])))))\n\n(defn o-skip? [sym]\n  (= 'debux.common.macro-specs/o-skip sym))\n\n(declare remove-d)\n\n;;; spy functions\n(def spy-first\n  (fn [result quoted-form indent]\n    (assert (integer? indent) (str \"indent was not correctly replaced for form \" (prn-str quoted-form) \"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"))\n    (send-trace! {:form (remove-d quoted-form 'dummy) :result result :indent-level indent})\n    ;(print-form-with-indent (form-header quoted-form) indent)\n    ;(pprint-result-with-indent (take-n-if-seq 100 result) indent)\n    result))\n\n(def spy-last\n  (fn [quoted-form indent result]\n    (assert (integer? indent) (str \"indent was not correctly replaced for form \" (prn-str quoted-form) \"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"))\n    (send-trace! {:form (remove-d quoted-form 'dummy) :result result :indent-level indent})\n    ;(print-form-with-indent (form-header quoted-form) indent)\n    ;(pprint-result-with-indent (take-n-if-seq 100 result) indent)\n    result))\n\n(defn spy-comp [quoted-form indent form]\n  (fn [& arg]\n    (let [result (apply form arg)]\n      (assert (integer? indent) (str \"indent was not correctly replaced for form \" (prn-str quoted-form) \"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"))\n      (send-trace! {:form (remove-d quoted-form 'dummy) :result result :indent-level indent})\n      ;(print-form-with-indent (form-header quoted-form) indent)\n      ;(pprint-result-with-indent (take-n-if-seq 100 result) indent)\n      result)))\n\n;; Remove trace info\n\n(defn debux-skip-symbol? [sym]\n  (contains? #{'day8.re-frame.debux.common.macro-specs/skip-outer\n               'day8.re-frame.debux.common.macro-specs/skip\n               'day8.re-frame.debux.common.macro-specs/o-skip\n               :day8.re-frame.debux.common.macro-specs/skip-place}\n             sym))\n\n(defn spy-first? [sym]\n  (= 'day8.re-frame.debux.common.util/spy-first sym))\n\n(defn remove-d [form d-sym]\n  ;; TODO: should we instead look to rewrite the quoted/spied forms\n  ;; at macro compile time, rather than filtering them out\n  ;; when the trace is being emitted?\n  (loop [loc (sequential-zip form)]\n    (let [node (z/node loc)]\n      ;(ut/d node)\n      (cond\n        (z/end? loc) (z/root loc)\n\n        ;; in case of (d ...)\n        (and (seq? node)\n             (or (= d-sym (first node))\n                 (debux-skip-symbol? (first node))\n                 (spy-first? (first node))))\n        ;; We take the third node, because the first two are\n        ;; (d <indent-level> ...)\n        (recur (z/replace loc (last node)))\n\n        ;; in case of spy-last\n        (and (seq? node)\n             (= `spy-last (first node)))\n        (recur (z/replace loc (last node)))\n\n        :else\n        (recur (z/next loc))))))\n"]}